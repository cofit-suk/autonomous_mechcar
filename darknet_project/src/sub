#!/usr/bin/env python

import rospy
from darknet_ros_msgs.msg import BoundingBoxes
from std_msgs.msg import Int16MultiArray
from sensor_msgs.msg import Imu 

GOAL_X = 200
GOAL_Y = 250
TH = 10

class Control():
    def __init__(self):
        self.pub = rospy.Publisher('/motor_PWM', Int16MultiArray, queue_size = 1)
        self.x = 0
        self.y = 0
        self.size = 0
    def drive(self):                                       
        msg = Int16MultiArray()

        # #for test imu if use this remove
        box = rospy.wait_for_message('/darknet_ros/bounding_boxes', BoundingBoxes)
        for data in box.bounding_boxes:
            if data.Class == "robot":
                self.x = (data.xmin + data.xmax) / 2
                self.y = (data.ymin + data.ymax) / 2
                self.size = (data.xmax - data.xmin) * (data.ymax - data.ymin)
        rospy.loginfo('class = {}, x = {}, y = {}, size = {}, prob. = {:.3f}'.format(data.Class, self.x, self.y, self.size, data.probability))
        # imu = rospy.wait_for_message('/imu', Imu)
        # yaw_data = imu.orientation.x
        # rospy.loginfo('yaw_data = %f' % yaw_data)

        msg.data = [0,0]
        r_vel = 0
        l_vel = 0
        # if self.x < GOAL_X - TH:
        #     l_vel += 100
        # elif self.x > GOAL_X + TH:
        #     r_vel += 100
        if self.y > GOAL_Y:
            l_vel = 200
            r_vel = 200
        msg.data[0] = l_vel
        msg.data[1] = r_vel
        rospy.loginfo('l = {}, r = {}'.format(msg.data[0], msg.data[1]))
        self.pub.publish(msg)
    # def callback(self, box):
    #     for data in box.bounding_boxes:
    #         if data.Class == "robot":
    #             self.x = (data.xmin + data.xmax) / 2
    #             self.y = (data.ymin + data.ymax) / 2
    #             self.size = (data.xmax - data.xmin) * (data.ymax - data.ymin)
    #         rospy.loginfo('class = {}, x = {}, y = {}, size = {}, prob. = {:.3f}'.format(data.Class, self.x, self.y, self.size, data.probability))


if __name__ == '__main__':
    rospy.init_node('yolo_sub')
    control = Control()
    rospy.loginfo('run')
    r = rospy.Rate(10)
    while not rospy.is_shutdown():
        control.drive()
        r.sleep()
